#+TITLE: knowledge repo
#+AUTHOR: Daniel Guimaraes
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+HEADER: :results output silent :headers '("\\usepackage{tikz}")
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="static/code.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="static/style.css"/>
#+begin_export html
<ul class='navbar'> 
  <li><a href="/">Home</a></li>
  <li><a href="/static/data-eng/index.html">Data Engineering</a></li>
  <li><a href="/static/soft-eng/index.html">Software Engineering</a></li>
</ul>
#+end_export

* About this

I have decided to record what I learn, as I believe writing is a great way to
persist knowledge. Concretely, a tweak of Feynman's study technique, instead of
saying out loud, I write.

This blog was generated using [[https://savannah.gnu.org/projects/emacs/][emacs]] org files, therefore, my org notes can be
easily exported into HTML. You can look at the [[https://github.com/dcguim/dgpage][source]]. If you are also interested
in using emacs for creating static websites, there are youtube channels which
explain this process in greater detail:

- [[https://www.youtube.com/watch?v=AfkrzFodoNw][system crafters]]
- [[https://www.youtube.com/watch?v=K6S-AKm5snc&t=750s][distro tube]]

I will try to document different Software and Data engineering topics, and to
keep it minimally structured and useful for others. However, there might be
some outliers and some posts won't fit well with the rest of the content. That's
my bad! I will try bridging those gaps and make topics coherent with eachother, in time.

#+begin_export html
<img id="profile-img" src="/static/img/profile-grey.jpg"/>
<ul class='contact'>
  <li><a href="mailto:daniel@guimaraes.io">
    <img id="contact-img" src="/static/img/email.png"/></a></li>
  <li><a href="https://www.linkedin.com/in/dguim/">
    <img id="contact-img" src="/static/img/linkedin.png"/></a></li>
  <li><a href="https://github.com/dcguim">
    <img id="contact-img" src="/static/img/github.png"/></a></li>
</ul>
#+end_export


# #+begin_src elisp :results list :exports results
# (let ((dirs (split-string (shell-command-to-string "ls *.org"))))
# (mapcar #'(lambda (d)
#    (format "[[file:%s]]" d))
#   dirs))
# #+end_src

# # export data engineering files to html   
# #+begin_src emacs-lisp :exports none
# (let ((dirs (split-string (shell-command-to-string "ls ../data-eng/"))))
#   (find-file "../data-eng/")
#   (remove nil (mapcar #'(lambda (d) 
#              (if (string-suffix-p ".org" d)
#                   (progn
#                      (print d)
#                      (find-file d)
# 		     (org-html-export-to-html))))
#    dirs)))
# #+end_src
