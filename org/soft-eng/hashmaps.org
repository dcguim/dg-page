#+TITLE: Hashmaps
#+SUBTITLE: Software Engineering Topics
#+INCLUDE: "../navbar.html" export html
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+HEADER: :results output silent :headers '("\\usepackage{tikz}")    
#+HEADER: :results output silent :headers '("\\usepackage{pgfplots}")

* LeetCode: [[https://leetcode.com/problems/longest-substring-without-repeating-characters/][Longest Substring Without Repeating Characters - 3]]
#+begin_src java
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int answer = -1, j = 0, n = s.length();
        if (s.isEmpty()) return 0;
        HashMap<Character, Integer> lastChar = new HashMap<Character,Integer>(n);
        for (int i=0; i< n; i++){
            char c = s.charAt(i);
            if (lastChar.getOrDefault(c, -1) >= j){
                j = lastChar.get(c) + 1;
            }
            answer = Math.max(answer, i-j+1);
            lastChar.put(c, i);
        }
        return answer;
    }
}
#+end_src
#+begin_src python
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # maintain two indexes i,j, which will define the substring
        # define a hashmap mapping a letter to the last seen position in the string
        if s == "": return 0
        lastChar = {l:-1 for l in s}        
        i = 0
        answer = -1
        for j in range(len(s)):
            if (ls := lastChar[s[j]]) > -1 and ls >= i:
                i = ls + 1
            answer = max(answer, j-i+1)
            lastChar[s[j]] = j
        return answer
#+end_src
This problem we have to find the longest substring which doesn't contain repeated
characters. This can be done by defining a limit $j$ and iterating once through
the characters $s[i]$ 's and looking back until $j$ to see if there is an $s[i]$
duplicate. The problem with this solution is that in the worst case scenario it
will take $O(n^2)$, image the input string doesn't have any duplicates, then for
every character it will look back until $s[0]$ to ensure there is no duplicates.

Like in many algorithms we can make a time and space trade-off. As we are only
interested in the last seen instance of the current char $s[i]$ so we can compare
with the limit $j$, we can map the chars last index position in a HashMap. This
way, we can achieve $O(n)$ complexity with $O(n)$ space, i.e. potentially every
char will exist in the map, in the worst case, without duplicates.

* LeetCode: [[https://leetcode.com/problems/map-sum-pairs/][Map Sum Pairs - 677]]
#+begin_src java
  class MapSum {

      HashMap<String, Integer> map = null;
      public MapSum() {
	  map = new HashMap<String, Integer>();
      }

      public void insert(String key, int val) {
	  map.put(key, val);
      }

      public int sum(String prefix) {
	  int sum = 0;
	  for (String k : map.keySet()){
	      if (k.startsWith(prefix)) sum += map.get(k);
	  }
	  return sum;
      }
  }
#+end_src
#+begin_src python
class MapSum:

    def __init__(self):
        self.d = {}

    def insert(self, key: str, val: int) -> None:
        self.d[key] = val

    def sum(self, prefix: str) -> int:
        s = 0
        for k in self.d.keys():
            if k.startswith(prefix):
                s += self.d[k]
        return s
#+end_src
Although classified as a medium difficulty problem, this is a fairly trivial.
We have therefore a good excuse to talk about the complexity of $map.put$ and
$map.get$ operations. HashMaps uses arrays and LinkedLists internally for
storing key-value pairs. The arrays represent the buckets
which, in turn, store to LinkedLists which store the key-value pairs:

 0) $\rightarrow (key1, value1) \rightarrow (key3, value3) \rightarrow (key6, value6)$
 1) $\rightarrow (key4, value4)$
 2) $\rightarrow (key2, value2) \rightarrow(key5, value5)$
 3) 
 4) $\rightarrow (key7, value7)$

The buckets $0..4$ store linked lists which store pairs. So in order to $put(k,v)$ a
pair first the the key is hashed $k_h$, i.e. a number is generated deterministically
give the key, that represents this very key. The hash can be arbitrarily large,
so normally one does $k_h\%5$ to obtain the $k_h$'s assigned bucket. Then, the associated
LinkedList will be traversed, if there is a key equals to $k$ the value $v$ will be
overwritten, if not, a new node will be created in the LinkedList. For the $get(k)$
operation is the same, except the previous state of the HashMap is preserved.

Although, it can take $O(n)$ for poorly implemented hash-functions, (i.e. it assign multiple
keys to the same bucket, instead of distributing it) these operations are said to
run in amortized (average-case) constant time.


* LeetCode: [[https://leetcode.com/problems/make-sum-divisible-by-p/][Make Sum Divisible by P - 1590]]
#+begin_src java
class Solution {
    public int minSubarray(int[] nums, int p) {
        // find the remainder to reach a multiple of p
        // target = sum(nums[0..N]) % p
        int n = nums.length, cursum = 0, target = 0, minlen = n;
        for(int i=0; i<n; i++) target = (target + nums[i]) % p;
        // the amount that must be removed from nums
        if (target == 0) return 0;
        HashMap<Integer, Integer> hist = new HashMap<Integer, Integer>(n);
        // find the interval [j,i] s.t. sum(nums[j..i])%p = target
        // cursum - prefix = target : sum(arr[0..i])%p - sum(arr[0..j])%p = target 
        hist.put(0,-1);
        for (int i = 0; i<n; i++){
            cursum = (cursum + nums[i]) % p;
            hist.put(cursum, i);
            // sum(arr[0..j])%p = (currsum - target) %p
            int prefix = (cursum - target + p) % p;            
            // look for the minimum value that satisfy
            minlen = Math.min(minlen, i - hist.getOrDefault(prefix, -n));    
        }
        return (minlen < n) ? minlen : -1;
    }
}
#+end_src

This question is about finding the indexes $j, i$ that must be removed such that
the remaining numbers are a multiple of $p$. The total sum equals of the input:
\[
\frac{\sum{arr[0..N]}}{p} = d + r
\]
where $d$ is the dividend and $r$ the remainder. The problem can also be expressed
as finding the indexes $j, i$ such that:
\[
\sum{arr[j,i]} \% p = r
\]
Therefore we would like to find the minimum interval such that the the following
equations holds:
\[
target = \sum{arr[0,N]} \% p = \sum{arr[j,i]} \% p = \left(\sum{arr[0,i]} - \sum{arr[0,j]}\right) \% p
\]
However, in order to determine all possible indexes $i$ and $j$ that the equation
above holds would take us $O(n^2)$. Better would be if we could rewrite this
equation isolating $arr[0,j]$ such that we would be able to only depend on $i$
and run this in linear time. This would need a bit of modulo arithmetics properties
knowledge. Concretely, one rule:
\[(a+b) \% x = ( a \% x + b \% x ) \% x\]
Therefore we can claim:
\[
\left(\sum{arr[0,i]} \% p - \sum{arr[0,j]} \% p - \sum{arr[0,N]} \% p\right) \% p = 0 \\
\sum{arr[0,j]} \% p = \left(\sum{arr[0,i]} \% p - \sum{arr[0,N]} \% p\right) \% p \\
\]

In doing so, we can define the prefix by iterating in $O(n)$ through $arr$ defining
the $cursum = \sum{arr[0,i]} \% p$ and hence the $prefix = cursum - target$. Note
that in order to define the interval $i-j$ we need to look up previous prefixes,
which can be done by mapping $cursum$ to $i$. The space needs is also $O(n)$ as
for each index $i$ there is a respective $cursum$ and they will be all added into
the HashMap.
