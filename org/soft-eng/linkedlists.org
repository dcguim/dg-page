#+TITLE: Linked lists
#+SUBTITLE: Software Engineering Topics
#+INCLUDE: "../navbar.html" export html
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+HEADER: :results output silent :headers '("\\usepackage{tikz}")
#+HEADER: :results output silent :headers '("\\usepackage{pgfplots}")

* LeetCode: [[https://leetcode.com/problems/copy-list-with-random-pointer/][Copy List with Random Pointer - 138]]
#+begin_src python
class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        curr = head
        orig2Copy = {}
        orig2Copy[None] = None
        while curr != None:
            n = Node(x=curr.val)
            orig2Copy[curr] = n 
            orig2Copy[n] = curr
            curr = curr.next
        currCopy = orig2Copy[head]
        while currCopy != None:
            currCopy.next = orig2Copy[orig2Copy[currCopy].next]
            currCopy.random = orig2Copy[orig2Copy[currCopy].random]
            currCopy = currCopy.next
        return orig2Copy[head]
#+end_src
#+begin_src java
class Solution {
    public Node copyRandomList(Node head) {
        // create a hashmap that would track the pos of the node in the list
        HashMap<Node, Node> orig2Copy = new HashMap<Node,Node>();
        // create the return copy of the original list
        Node curCopy, cur = head;
        // loop through the original list and copy each next node to the map
        while (cur != null){
            orig2Copy.put(cur, new Node(cur.val));
            cur = cur.next;
        } 
        // loop again through the original list and set next and random nodes
        cur = head;
        while(cur != null){
            curCopy = orig2Copy.get(cur);
            curCopy.next = orig2Copy.get(cur.next);
            curCopy.random = orig2Copy.get(cur.random);
            cur = cur.next;
        }
        return orig2Copy.get(head);
    }
}
#+end_src
The first issue perceived when creating a copy with random pointers while 
iterating over the original list, is that they can point to unexisting list
elements. Therefore, the first idea was to simply traverse the original list
and create the deep copies of each element. Secondly, it is hard to be able to
identify a random pointer from one element in the original list, one cannot use
node values, as they might not be unique, using the distance between the current
element and random element would be quite time consuming. If we simply draw two
equal lists on top of each other, we might be tempted to express that we would
like to map the a copied element's random pointer to the same copied element as
in the original list. So if we could expresss, that an element in the original
list points to the corresponding element in the copied list, we could say something
like $curCopy.random = orig2Copy.get(cur.random)$ which means map the random pointer
in the copied list to the corresponding copied element referring to the random
pointer in the original list.

The complexity in this problem is not two hard to analyse, the content of both
while loops execute in $O(1)$, at each while loop we are checking every element
on the list so $O(n)$ time.
* LeetCode: [[https://leetcode.com/problems/swapping-nodes-in-a-linked-list/][Swapping nodes in a Linked List - 1721]]

 #+begin_src java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapNodes(ListNode head, int kBegPos) {
        // determining the linked list size
        ListNode curr = head;
        int size = 1;
        while (curr.next != null){
            curr = curr.next;
            size+=1;
        }
        // determining the beginning and end positions of swapped nodes
        int kEndPos;
        if (kBegPos >= size/2+1){
            kEndPos = kBegPos;
            kBegPos = size - kBegPos + 1;   
        } else{
           kEndPos = size - kBegPos + 1;
        }
        // finding the references for beginning and end nodes and it's neighbors.
        curr = head;
        ListNode kBegPrev, kBeg, kBegNext, kEndPrev, kEnd, kEndNext;
        kBegPrev = kBeg = kBegNext = kEndPrev = kEnd = kEndNext = null;
        int currIndex = 1;
        while (curr != null){            
            if (currIndex == kBegPos-1) {
                kBegPrev = curr;
            } else if(currIndex == kBegPos){
                kBeg = curr;
            } else if (currIndex == kBegPos+1){
                kBegNext = curr;
            } 
            if (currIndex == kEndPos-1){
                kEndPrev = curr;
            } else if (currIndex == kEndPos){
                kEnd = curr;
            } else if (currIndex == kEndPos+1){
                kEndNext = curr;
            }
            currIndex +=1;
            curr = curr.next;
        }
        // swapping the beginning and end nodes
        if (kEnd != null && kBegNext != null){
            if (kBegPrev != null) kBegPrev.next = kEnd;
            if (kBegNext != kEnd) kEnd.next = kBegNext;
            else kEnd.next = kBeg;
        }
        if (kEndPrev != null && kBeg != null){
            if (kEndPrev != kBeg) kEndPrev.next = kBeg;
            if (kEndNext != null) kBeg.next = kEndNext;
            else kBeg.next = null;
        }
        if (kBegPos == 1) return kEnd;
        return head;
    }
}
#+end_src
#+begin_src python
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
	  curr = a = head
	  for _ in range(k-1): curr = curr.next
	  b = curr
	  while curr.next != None:
	      a = a.next
	      curr = curr.next
	  a.val, b.val = b.val, a.val
	  return head
#+end_src
Firstly, although not obviously stated in the problem description, it was
assumed that one must swap nodes not just values. Therefore it would be possible
to write a more efficient algorithm, however, with similar upper bounds by
preserving the original structure.

The code comments are pretty self explanatory about the behaviour of the code,
one must keep in mind edge cases when defining the nodes involved in the swap,
for instance when the node previous to the end node is the beginning node then
the ending node will point directly to the beginning node, as opposed to the node
next to the beginning node. Additionally, when the head node is swapped, then
the reference to the head must be the ending node.

The complexity of this code is $O(n)$. It is hard to imagine a solution with a
tighter upper bound  as one must iterate throughout the linked list to define
it's size and hence the position of the end node.

Despite being hard to provide tighter upper bound we did attempt to provide a
simpler solution in Python - avoiding complex if statements as above. If we try
simply to swap values, we would liket o be in the position to do something like:
$a.val, b.val = b.val, a.val$ in order to do this, we need to find the correct
pointers the swapped nodes, $n_a$ and $n_b$.

* GeeksForGeeks: [[https://practice.geeksforgeeks.org/problems/flattening-a-linked-list/1/][Flattening a linked list]]

#+begin_src java
class Solution
{
    void insert(Node curr, Node sub){
        Node prev, next;
        next = curr;
        do {
            prev = next;
            next = next.next;
        } while (next != null && sub.data > next.data);
        curr.bottom = sub.bottom;
        sub.bottom = null;
        prev.next = sub;
        sub.next = next;
    }
    Node flatten(Node root){
        // ensure that the horizontal linked list is ordered
        Node head = mergeSort(root);
        Node curr = head;
        // flatten the linked list
        while (curr!=null){
            while (curr.bottom != null){
                insert(curr, curr.bottom);
            }
            curr = curr.next;
        }
        Node a = head;
        Node sub = a;
        // transform the horizontally flattened list to a vertically flattened one
        while (a.next != null){
            sub.bottom = a.next;
            sub = a.next;
            if (a.next.next != null) a.next = a.next.next;
            else a.next = null;
        }
        return head;
    }
}
#+end_src

Firstly, notice by looking in the support evalutaion code provided by GfG
in the $printList$ function that it assumed that the provided flattened list is
vertical, not horizontal. Therefore, this code flattens the list horizontally and
then converts to a vertical linked list afterwards. Additionally, that it is
necessary to implemented an efficient algortihm for sorting the horizontal provided
list first, as the provided list is only sorted vertically. For efficient sorting
of linked lists take a look at the [[file:sortsearch.html][Merge Sort for Linked List]] exercise first.

The core of the $flatten$ method is pretty straight-forward, a while-loop that
is performed horizontally, and a nested while loop vertically. Notice, that
there is no need to update the current value in the neste loop as I am flattening
every single node in the sublist of $curr$, so my stop condition is
$while (curr.bottom != null)$. So far, it took $O(nlog(N))$ to perform the merge
sort, additionally, the nested while loop visits every single node and
performs an insert operation on those who are in sublists, let's take a closer
look at the $insert$ method.

$insert$ receives the a $curr$ node and one of it's sub nodes, $sub$. The $do-while$
loop traverses the linked list horizontally keeping the adjacent $prev$ and $next$
nodes $while(sub.data > next.data)$. When the loop finishes we know we have found
the right position to insert $sub$. However, one must be careful assigning proper
values to all involved nodes. The algorithm first remove $sub$ from the list
by letting $curr.next$ point to $sub.next$, moreover, $sub$ will be flattened
to it has no bottom node. Next, $sub$ is inserted in the horizontal linked list.
That's pretty much it! Assuming there are $N$ nodes in the horizontal list and
$M$ nodes on the vertical lists, than for every $m$ node it will take at most $N$
iterations to find it's appropriate position. Hence, it will take $O(M*N)$.

* LeetCode: [[https://leetcode.com/problems/linked-list-in-binary-tree/][Linked List in Binary Tree - 367]]
#+begin_src java
class Solution {
    class TreeNodeParent {
        public TreeNode node;
        public TreeNode par;
        public TreeNodeParent(TreeNode node, TreeNode parent){
            this.node = node;
            this.par = parent;
        }
    }
    public boolean isSubPath(ListNode head, TreeNode root) {
        // bfs until the first node was found with the same value as the first listnode
        // keep track of the current element in the linked list for each potential match
        // if the next element does not match the tracked list, delete
        TreeNodeParent cur;
        List<ListNode> parListElems;
        ArrayDeque<TreeNodeParent> unvisited = new ArrayDeque<TreeNodeParent>();
        // notice an tree list can refer to multiple elements on the linked list
        // for instance a tree node can refer to an element on the middle of the
        // list as well as to the root, simultaneously 
        HashMap<TreeNode, ArrayList<ListNode>> treeListMatch = 
            new HashMap<TreeNode, ArrayList<ListNode>>();
        unvisited.offer(new TreeNodeParent(root, null));
        while (unvisited.size() > 0){
            cur = unvisited.pollLast();
            if (cur.node.val == head.val){
                if (head.next == null) return true;
                treeListMatch.put(cur.node, new ArrayList(){{
                            add(head);
                }});
            }
            // check if the parent of the current node refers to a 
            // element in the linked list, and the current match 
            // the next in the list.
            parListElems = treeListMatch.getOrDefault(cur.par, new ArrayList<ListNode>(0));
            for (ListNode listElem : parListElems){
                if (listElem.next.val == cur.node.val) {
                    // notice this ensures that listElem.next.val always exist.
                    if (listElem.next.next == null) return true;
                    if (treeListMatch.getOrDefault(cur.node, null) == null){
                        treeListMatch.put(cur.node, new ArrayList(){{
                            add(listElem.next);
                        }});
                    } else{
                        treeListMatch.get(cur.node).add(listElem.next);
                    }                        
                }            
            }
            if (cur.node.left != null){ 
                unvisited.offerFirst(new TreeNodeParent(cur.node.left, cur.node));
            }
            if (cur.node.right != null){
                unvisited.offerFirst(new TreeNodeParent(cur.node.right, cur.node));
            }
        }
        return false;
    }
}
#+end_src
