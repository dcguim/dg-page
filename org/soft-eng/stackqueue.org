#+TITLE: Stacks and Queues
#+SUBTITLE: Software Engineering Topics
#+INCLUDE: "../navbar.html" export html
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+HEADER: :results output silent :headers '("\\usepackage{tikz}")
#+HEADER: :results output silent :headers '("\\usepackage{pgfplots}")

* LeetCode: [[https://leetcode.com/problems/binary-search-tree-iterator/][Binary Search Tree Iterator - 173]]

#+begin_src java
class BSTIterator {
    
    ArrayDeque<TreeNode> traversal;
    
    private void IOenqueue(TreeNode cur){
        while (cur.left != null){
            cur = cur.left;
            traversal.offerLast(cur);
        }
    }
    
    public BSTIterator(TreeNode root) {
        traversal = new ArrayDeque<TreeNode>();
        traversal.offer(root);
        IOenqueue(root);
    }
    
    public int next() {
        TreeNode nextNode = traversal.pollLast();
        if (nextNode.right != null) {
            traversal.offer(nextNode.right);
            IOenqueue(nextNode.right);
        }
        return nextNode.val;
    }
    
    public boolean hasNext() {
        if (traversal.peekLast() != null) return true;
        return false;
    }
}
#+end_src

* LeetCode: [[https://leetcode.com/problems/queue-reconstruction-by-height][Queue Reconstruction by Height - 406]]
   
#+begin_src java
  class Solution {
      public int queueSize = 0;
    
      public void addToQueue(int[][] queue, int[] person){
	  int personPos = queue.length - 1 - queueSize + person[1];
	  if (queue[personPos][0] == 0){
	      queue[personPos] = person;
	      queueSize += 1;
	  } else{
	      // shift all people in front of the queue until personPos one position down
	      for (int i=queue.length - queueSize; i<= personPos; i++){
		queue[i-1] = queue[i];                
	      }
	      queue[personPos] = person;
	      queueSize += 1;
	  }
      }
    
      public int[][] reconstructQueue(int[][] people) {
	  Arrays.sort(people, (int[] p1, int[] p2) ->
		      (p2[0] != p1[0]) ? p2[0]-p1[0] : p1[1]-p2[1]);
	  int[][] queue = new int[people.length][2];
	  // looping for all people
	  for (int i=0; i< people.length; i++) addToQueue(queue, people[i]);
	  return queue;
      }
  }
#+end_src

The key part of solving this question is that it is way better to construct the
queue with heights in a decreasing fashion. As each person $i$ is described as
$[h_i,k_i]$, where $k_i$ is the number of people with bigger or equal height in
front of $i$ in the queue, therefore, if we already queued all people $p$
with $h_p>=h_i$, then we can be sure that we have placed person $i$ in the right
position. Additionally, one must be careful queueing people with the same height
so if two people $p_1$ and $p_2$ have the same height, and $k_1>k_2$ if we first
queue $p_1$ we will calculate the position in the queue without taking into
consideration $p_2$, and later on when queueing $p_2$ in front of $p_1$, $p_1$
will be in off by one. Hence que sorting:
$$(p2[0] != p1[0]) ? p2[0]-p1[0] : p1[1]-p2[1]$$

Regarding complexity, there is $O(nlog(n))$ for sorting the list, so this is the
first obvious lowerbound. As we loop for all people, and for each person we have
to push every people in front of him upwards, in the worst case cenario which
everyone have the same height, we have to keep pushing the previously queued
individuals up. Hence, the complexity is $O(n^2)$.

* GeeksForGeeks: [[https://practice.geeksforgeeks.org/problems/lru-cache/1][LRU Cache]]
#+begin_src java
  class LRUCache
  {
      static Deque<ArrayList<Integer>> cache;
      static Deque<ArrayList<Integer>> auxCache;
      static int capacity;
      //Constructor for initializing the cache capacity with the given value.
      LRUCache(int cap)
      {
	  cache = new ArrayDeque<ArrayList<Integer>>(cap);
	  auxCache = new ArrayDeque<ArrayList<Integer>>(cap);
	  capacity = cap;
      }
    
      //Function to return value corresponding to the key.
      public static int get(int key)
      {
	  if (cache.size() == 0) return -1;
	  int i = 0;
	  int keyValue = -1;
	  while (i < cache.size()){
	      ArrayList<Integer> pair = cache.removeFirst();
	      if (pair.get(0) == key) keyValue = pair.get(1);
	      cache.addLast(pair);
	      i+=1;
	  }
	  if (keyValue >= 0){
	      return keyValue;
	  }
	  return -1;
      }
      //Function for storing key-value pair.
      public static void set(int key, int value)
      {
	  int val = get(key);
	  if (val == -1) {
	      ArrayList<Integer> keyVal = new ArrayList<Integer>(2){{
		 add(key);
		 add(value);
	      }};
	      if (cache.size() < capacity){
		 cache.addFirst(keyVal);
	      }else{
		  cache.removeLast();
		  cache.addFirst(keyVal);
	      }
	  } else{
	      ArrayList<Integer> pair = null;
	      // loop until the the pair with key == key is in the top
	      while (pair == null || pair.get(0) != key){
		  pair = cache.removeFirst();
		  auxCache.addFirst(pair);
	      }
	      // store the new top pair in the pair variable
	      pair = auxCache.removeFirst();
	      pair.set(1, value);
	      // push all the items left in the auxCache to the main cache
	      while(auxCache.size() > 0){
		  ArrayList<Integer> a = auxCache.removeFirst();
		  cache.addFirst(a);
	      }
	      // push the updated top pair to the queue
	      cache.addFirst(pair);
	      auxCache.clear();
	  }
      }
  }
#+end_src

Although this is a great question to practice queues, the description of this
problem is somewhat ambiguous. For example, it is not clear what is the state
of the list when an existing key is updated, for example, say there is a key-value
pair $[21, 33]$ in the LRU cache, and the user then SET [$21$ $35$], then the queue
could be like:
|---------+---------------------------+---------|
| [3 93]  |                           | [21 35] |
| [15 74] |                           | [3 93]  |
| [12 7]  | SET [22 33] $\rightarrow$ | [15 74] |
| [21 33] |                           | [12 7]  |
| [74 11] |                           | [74 11] |
|---------+---------------------------+---------|

OR 

|---------+---------------------------+---------|
| [3 93]  |                           | [22 35] |
| [15 74] |                           | [74 11] |
| [12 7]  | SET [22 33] $\rightarrow$ | [3 93]  |
| [21 33] |                           | [15 74] |
| [74 11] |                           | [12 7]  |
|---------+---------------------------+---------|

The solution above, assumed the first option holds, which goes with the logic
normally employed by the last recently updated implementation of caches, however,
the code verifying the result understand a LRU cache in another way. As this
assumption didn't lead to 100% successful test coverage in GeeksForGeeks.


Having said that, let's analyse the complexity of the $get$ and $set$ operations.
The LRU cache was implemented with a double-sided queue, i.e. we can add elements
to the bottom or to the top of the queue. As the ArrayDeque implementation used
has no capacity restrictions, and they grow as necessary, their operations are
said to contain amortized constant time, that means, that usually it takes
constant time, however, it can take $O(n)$ when a user exceed the size of the
array deque and it must automatically grow, that entails, creating a bigger
array and copying the elements from the old to the new array. There are exceptions
such as the remove operations that receive an element as a parameter, which run
in linear time. That's fair, they must first find the element down the deque to
remove it. In this implementation we use only amortized constant time operations
and we don't automatically grows the queue, we set the capacity as it's fixed size.

The $get$ operation loops throught the list once $O(n)$, and look for the keys,
regardless if it finds the key in the first or the last position it look at all
the elements and leaves the position of the elements unchanged.

The $set$ operation first must decide if it is an update or a new element,
so it calls $get$, first. If the element does not exist it it adds in constant
time, if it does, it must first remove the element of the list, to do this, an
auxiliary deque is used to store the values before the element. Then, it adds
the values back to the queue and updates the value of the existing key. Notice,
it will take $\le n$ times to find the key plus $\le n$ times to put it back.
Therefore, the $set$ will also take $O(n)$.

* LeetCode: [[https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/][Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit - 1438]]
#+begin_src java
class Solution {
    public int longestSubarray(int[] nums, int limit) {
        int j = 0, n = nums.length, longest = 0;
        ArrayDeque<Integer> min = new ArrayDeque<Integer>(n);
        ArrayDeque<Integer> max = new ArrayDeque<Integer>(n);
        for (int i=0; i < n; ++i){
            while (!min.isEmpty() && nums[i] < min.peekFirst()) min.pollFirst();
            while (!max.isEmpty() && nums[i] > max.peekFirst()) max.pollFirst();
            min.offerFirst(nums[i]);
            max.offerFirst(nums[i]);
            while ((max.peekLast() - min.peekLast()) > limit){
                if(nums[j] == min.peekLast()) min.pollLast();
                if(nums[j] == max.peekLast()) max.pollLast();
                j+=1;
            }
            longest = Math.max(longest, i-j+1);
        }
        return longest;
    }
}
#+end_src

* LeetCode: [[https://leetcode.com/problems/k-highest-ranked-items-within-a-price-range/][K Highest Ranked Items Within a Price Range - 2146]]
#+begin_src java
class Solution {
    class Cell{
        public Cell (int r, int c, int v){
            pos = new int[]{r, c};
            value = v;
        }
        int[] pos;
        public int value;
        public int rank;
    }
    int[][] grid;
    
    PriorityQueue<Cell> heap;
    
    HashMap<Integer, Integer> visitedDistance;
    
    ArrayDeque<int[]> unexplored;
    
    // pos = 1 upper neighbor
    // pos = 2 right neighbor
    // pos = 3 down neighbor
    // pos = 4 left neighbor
    public void visitNeighbor(int[][] grid, int row, int col, byte pos, int[] pricing){
        int r = (pos == 2) ? row+1 : (pos == 4) ? row-1 : row;
        int c = (pos == 1) ? col+1 : (pos == 3) ? col-1 : col;
        if (r < grid.length && r >= 0 && c < grid[0].length && c >= 0 && grid[r][c] > 0 && 
           visitedDistance.getOrDefault(r*grid[0].length + c, -1) == -1){
            unexplored.add(new int[]{r,c});
            int rank = visitedDistance.get(row*grid[0].length+ col) + 1;
            visitedDistance.put(r*grid[0].length+ c, rank);
            if (grid[r][c] >= pricing[0] && grid[r][c] <= pricing[1]){
                Cell n = new Cell(r, c, grid[r][c]);
                n.rank = rank;
                heap.add(n);
            }
        }
    }
    public List<List<Integer>> highestRankedKItems(int[][] grid, int[] pricing, int[] start, int k) {
        int r, c, rank, nCells = grid.length*grid[0].length;
        // create a heap that will keep nodes with higher rank at the top
        heap = new PriorityQueue<Cell>(nCells, 
            (c1, c2) -> (c1.rank != c2.rank) ? c1.rank - c2.rank : 
            (c1.value != c2.value) ? c1.value - c2.value : 
            (c1.pos[0] != c2.pos[0]) ? c1.pos[0] - c2.pos[0] : c1.pos[1] - c2.pos[1]);
        Cell iniCell = new Cell(start[0], start[1], grid[start[0]][start[1]]);
        if (iniCell.value >= pricing[0] && iniCell.value <= pricing[1]) heap.add(iniCell);
        // create a list of unexplored nodes, what will be used to track all neighbors of current cell
        unexplored = new ArrayDeque<int[]>(nCells);
        unexplored.addFirst(new int[]{start[0], start[1]});
        // track which nodes were visited so they wont be visited twice
        visitedDistance = new HashMap<Integer, Integer>(nCells);
        visitedDistance.put(start[0]*grid[0].length + start[1], 0);
        ArrayList<List<Integer>> result = new ArrayList<List<Integer>>(k);
        while (!unexplored.isEmpty()){
            // remove the last cell from the list in constant time and mark this cell as visited
            int[] cur = unexplored.poll();
            // ensure that unvisited cells not walls and respect grid boundries
            // (int row, int col, int rank, byte pos, int[] pricing)
            visitNeighbor(grid, cur[0], cur[1], (byte)1, pricing);
            visitNeighbor(grid, cur[0], cur[1], (byte)2, pricing);
            visitNeighbor(grid, cur[0], cur[1], (byte)3, pricing);
            visitNeighbor(grid, cur[0], cur[1], (byte)4, pricing);
        }
        for (int i=0; i<k; ++i){
            Cell head = heap.poll();
            if (head != null) result.add(new ArrayList<Integer>(2){{
                    add(head.pos[0]); 
                    add(head.pos[1]);
             }});
         }
         return result;
    }
}
#+end_src
  
  There are three main data structures used, a priority queue, or heap,
  that keeps in the head the element with the highest rank, notice that the criteria
  to compare two elements in the heap are exactly the one described, notice that
  the starting cell will be considered if it is between the provided price range.
  Next, we create a queue $unexplored$ which keeps all cells visited, by visit
  it is meant that we calculate it's distance to starting node and add to the
  heap if the cell value is in the price range. There is also a hashmap which
  maps every cell in the board to the distance from the starting cell, this hashmap
  is updated by incrementing the distance of the parent by 1. It seems like a lot
  of complex data structures, but they are all essential to the implementation
  the only possible modification would be to transform the priority queue into
  a simple list that is later sorted, although a list/array is a simpler structure
  than a heap, it seems we would only be shifting the complexity of sorting from
  the the main execution of the algorithm when we visit a new cell and add to the
  heap to the end when we would need to sort the list with the the criteria provided.
  Therefore the priority list is kept, and the best running solutions in leet code
  also seemed to have similar data structures. In this case, the space complexity
  will be $O(n)$ as we have three data structures with at most $n$ elements, where
  $n$ is the amount of cells in the board.

  
  The main while loop simply visit all the potential 4 neighboring cells, those
  cells will be added to the $unexplored$ queue, therefore this loop will run
  for every cell in the board. Let's now examine the complexity of $visitNeighbor()$
  method. It will first check that the neighbor cell respect the grid's dimensions
  and that it was not visited yet, this is done by checking if the distance to
  to the start node is already calculated, i.e. if there is already a key in the
  $visitedDistance$ hashmap, this check is done in $O(1)$. Moreover, adding to an
  element to ArrayDeque run in amortized constant time, however, as the ArrayDeque
  has a constant $nCells$ size it will also run in constant time. Moreover the
  $get()$ and $put()$ operations in $visitedDistance$ also run in constant time.
  Lastly, a cell will be potentially added to the heap, this will take $O(log(n))$
  as we can just add the element $n$ as a leaf and loop while the $parent(n) < n$
  pushing the new added node up the tree until necessary. The mentioned complexity
  is due to the fact the height of the tree has at most size $log_2(n)$. Hence,
  the overall time complexity is O(nlog(n)).


